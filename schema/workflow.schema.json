{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/kitproj/kit/internal/types/workflow",
  "$ref": "#/$defs/Workflow",
  "$defs": {
    "Duration": {
      "properties": {
        "Duration": {
          "$ref": "#/$defs/Duration",
          "title": "Duration"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Duration"
      ],
      "title": "Duration"
    },
    "EnvVars": {
      "patternProperties": {
        ".*": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "EnvVars",
      "description": "A list of environment variables."
    },
    "Envfile": {
      "items": {
        "type": "string"
      },
      "type": "array",
      "title": "Envfile"
    },
    "HTTPGetAction": {
      "properties": {
        "scheme": {
          "type": "string",
          "title": "scheme",
          "description": "Scheme to use for connecting to the host. Defaults to HTTP."
        },
        "port": {
          "type": "integer",
          "title": "port",
          "description": "Number of the port"
        },
        "path": {
          "type": "string",
          "title": "path",
          "description": "Path to access on the HTTP server."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "HTTPGetAction",
      "description": "HTTPGetAction describes an action based on HTTP Locks requests."
    },
    "HostPath": {
      "properties": {
        "path": {
          "type": "string",
          "title": "path",
          "description": "Path of the directory on the host."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "path"
      ],
      "title": "HostPath"
    },
    "Port": {
      "properties": {
        "containerPort": {
          "type": "integer",
          "title": "containerPort",
          "description": "The container port to expose"
        },
        "hostPort": {
          "type": "integer",
          "title": "hostPort",
          "description": "The host port to route to the container port"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Port",
      "description": "A port to expose."
    },
    "Ports": {
      "items": {
        "$ref": "#/$defs/Port"
      },
      "type": "array",
      "title": "Ports",
      "description": "A list of ports to expose."
    },
    "Probe": {
      "properties": {
        "tcpSocket": {
          "$ref": "#/$defs/TCPSocketAction",
          "title": "tcpSocket",
          "description": "The action to perform."
        },
        "httpGet": {
          "$ref": "#/$defs/HTTPGetAction",
          "title": "httpGet",
          "description": "The action to perform."
        },
        "initialDelaySeconds": {
          "type": "integer",
          "title": "initialDelaySeconds",
          "description": "Number of seconds after the process has started before the probe is initiated."
        },
        "periodSeconds": {
          "type": "integer",
          "title": "periodSeconds",
          "description": "How often (in seconds) to perform the probe."
        },
        "successThreshold": {
          "type": "integer",
          "title": "successThreshold",
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed."
        },
        "failureThreshold": {
          "type": "integer",
          "title": "failureThreshold",
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Probe",
      "description": "A probe to check if the task is alive, it will be restarted if not."
    },
    "Strings": {
      "items": {
        "type": "string"
      },
      "type": "array",
      "title": "Strings"
    },
    "TCPSocketAction": {
      "properties": {
        "port": {
          "type": "integer",
          "title": "port",
          "description": "Port number of the port to probe."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "port"
      ],
      "title": "TCPSocketAction",
      "description": "TCPSocketAction describes an action based on opening a socket"
    },
    "Task": {
      "properties": {
        "type": {
          "type": "string",
          "title": "type",
          "description": "Type is the type of the task: \"service\" or \"job\". If omitted, if there are ports, it's a service, otherwise it's a job.\nThis is only needed when you have service that does not listen on ports.\nServices are running in the background."
        },
        "log": {
          "type": "string",
          "title": "log",
          "description": "Where to log the output of the task. E.g. if the task is verbose. Defaults to /dev/stdout. Maybe a file, or /dev/null."
        },
        "image": {
          "type": "string",
          "title": "image",
          "description": "Either the container image to run, or a directory containing a Dockerfile. If omitted, the process runs on the host."
        },
        "imagePullPolicy": {
          "type": "string",
          "title": "imagePullPolicy",
          "description": "Pull policy, e.g. Always, Never, IfNotPresent"
        },
        "livenessProbe": {
          "$ref": "#/$defs/Probe",
          "title": "livenessProbe",
          "description": "A probe to check if the task is alive, it will be restarted if not. If omitted, the task is assumed to be alive."
        },
        "readinessProbe": {
          "$ref": "#/$defs/Probe",
          "title": "readinessProbe",
          "description": "A probe to check if the task is ready to serve requests. If omitted, the task is assumed to be ready if when the first port is open."
        },
        "command": {
          "$ref": "#/$defs/Strings",
          "title": "command",
          "description": "The command to run in the container or on the host. If both the image and the command are omitted, this is a noop."
        },
        "args": {
          "$ref": "#/$defs/Strings",
          "title": "args",
          "description": "The arguments to pass to the command"
        },
        "sh": {
          "type": "string",
          "title": "sh",
          "description": "The shell script to run, instead of the command"
        },
        "manifests": {
          "$ref": "#/$defs/Strings",
          "title": "manifests",
          "description": "A directories or files of Kubernetes manifests to apply. Once running the task will wait for the resources to be ready."
        },
        "namespace": {
          "type": "string",
          "title": "namespace",
          "description": "The namespace to run the Kubernetes resource in. Defaults to the namespace of the current Kubernetes context."
        },
        "workingDir": {
          "type": "string",
          "title": "workingDir",
          "description": "The working directory in the container or on the host"
        },
        "user": {
          "type": "string",
          "title": "user",
          "description": "The user to run the task as."
        },
        "env": {
          "$ref": "#/$defs/EnvVars",
          "title": "env",
          "description": "Environment variables to set in the container or on the host"
        },
        "envfile": {
          "$ref": "#/$defs/Envfile",
          "title": "envfile",
          "description": "Environment file (e.g. .env) to use"
        },
        "ports": {
          "$ref": "#/$defs/Ports",
          "title": "ports",
          "description": "The ports to expose"
        },
        "volumeMounts": {
          "items": {
            "$ref": "#/$defs/VolumeMount"
          },
          "type": "array",
          "title": "volumeMounts",
          "description": "Volumes to mount in the container"
        },
        "tty": {
          "type": "boolean",
          "title": "tty",
          "description": "Use a pseudo-TTY"
        },
        "watch": {
          "$ref": "#/$defs/Strings",
          "title": "watch",
          "description": "A list of files to watch for changes, and restart the task if they change"
        },
        "mutex": {
          "type": "string",
          "title": "mutex",
          "description": "A mutex to prevent multiple tasks with the same mutex from running at the same time"
        },
        "semaphore": {
          "type": "string",
          "title": "semaphore",
          "description": "A semaphore to limit the number of tasks with the same semaphore that can run at the same time"
        },
        "dependencies": {
          "$ref": "#/$defs/Strings",
          "title": "dependencies",
          "description": "A list of tasks to run before this task"
        },
        "targets": {
          "$ref": "#/$defs/Strings",
          "title": "targets",
          "description": "A list of files this task will create. If these exist, and they're newer than the watched files, the task is skipped."
        },
        "restartPolicy": {
          "type": "string",
          "title": "restartPolicy",
          "description": "The restart policy, e.g. Always, Never, OnFailure. Defaults depends on the type of task."
        },
        "stalledTimeout": {
          "$ref": "#/$defs/Duration",
          "title": "stalledTimeout",
          "description": "The timeout for the task to be considered stalled. If omitted, the task will be considered stalled after 30 seconds of no activity."
        },
        "group": {
          "type": "string",
          "title": "group",
          "description": "The group this task belongs to. Tasks in the same group will be visually grouped together in the UI."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Task",
      "description": "A task is a container or a command to run."
    },
    "Tasks": {
      "patternProperties": {
        ".*": {
          "$ref": "#/$defs/Task"
        }
      },
      "type": "object",
      "title": "Tasks"
    },
    "Volume": {
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "description": "Volume's name."
        },
        "hostPath": {
          "$ref": "#/$defs/HostPath",
          "title": "hostPath",
          "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "name",
        "hostPath"
      ],
      "title": "Volume"
    },
    "VolumeMount": {
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "description": "This must match the name of a volume."
        },
        "mountPath": {
          "type": "string",
          "title": "mountPath",
          "description": "Path within the container at which the volume should be mounted."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "name",
        "mountPath"
      ],
      "title": "VolumeMount",
      "description": "VolumeMount describes a mounting of a Volume within a container."
    },
    "Workflow": {
      "properties": {
        "port": {
          "type": "integer",
          "title": "port"
        },
        "terminationGracePeriodSeconds": {
          "type": "integer",
          "title": "terminationGracePeriodSeconds"
        },
        "tasks": {
          "$ref": "#/$defs/Tasks",
          "title": "tasks"
        },
        "volumes": {
          "items": {
            "$ref": "#/$defs/Volume"
          },
          "type": "array",
          "title": "volumes"
        },
        "semaphores": {
          "patternProperties": {
            ".*": {
              "type": "integer"
            }
          },
          "type": "object",
          "title": "semaphores"
        },
        "env": {
          "$ref": "#/$defs/EnvVars",
          "title": "env"
        },
        "envfile": {
          "$ref": "#/$defs/Envfile",
          "title": "envfile"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Workflow"
    }
  }
}